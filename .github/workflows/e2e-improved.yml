name: E2E Tests (Improved)

run-name: E2E Tests - ${{ github.event.client_payload.environment || 'multi-env' }} - ${{ github.event_name }}

on:
  repository_dispatch:
    types: [run-e2e-tests]
  pull_request:
    paths:
      - 'tests/**'
      - 'src/**'
      - 'playwright.config.ts'
      - 'package*.json'
  push:
    branches: [main]
    paths:
      - 'tests/**'
      - 'src/**'
      - 'playwright.config.ts'
      - 'package*.json'
  schedule:
    # Daily run at 6:00 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'sealion'
        type: choice
        options:
          - sealion
          - leopard
          - jaguar
          - puma
          - bear
          - tiger
          - whale
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'api'
        type: choice
        options:
          - api
          - ui
          - both

env:
  ALLURE_RESULTS_DIR: allure-results
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_CLOUDFRONT_DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION }}

permissions:
  contents: read
  checks: write
  id-token: write
  statuses: write

concurrency:
  group: e2e-${{ github.ref }}-${{ github.event.client_payload.environment || inputs.environment || 'scheduled' }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      environments: ${{ steps.config.outputs.environments }}
      test-types: ${{ steps.config.outputs.test-types }}
      playwright-version: ${{ steps.versions.outputs.playwright }}
      node-version: ${{ steps.versions.outputs.node }}
      cache-key: ${{ steps.cache-keys.outputs.node-modules }}
      thread-ts: ${{ steps.slack-start.outputs.thread_ts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine test configuration
        id: config
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            # Single environment from dispatch
            echo "environments=[\"${{ github.event.client_payload.environment }}\"]" >> $GITHUB_OUTPUT
            echo "test-types=[\"api\"]" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger
            echo "environments=[\"${{ inputs.environment }}\"]" >> $GITHUB_OUTPUT
            if [[ "${{ inputs.test_type }}" == "both" ]]; then
              echo "test-types=[\"api\", \"ui\"]" >> $GITHUB_OUTPUT
            else
              echo "test-types=[\"${{ inputs.test_type }}\"]" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Daily run - all environments, UI only on sealion
            echo "environments=[\"sealion\", \"leopard\", \"jaguar\"]" >> $GITHUB_OUTPUT
            echo "test-types=[\"api\", \"ui\"]" >> $GITHUB_OUTPUT
          else
            # PR/Push - quick validation on sealion
            echo "environments=[\"sealion\"]" >> $GITHUB_OUTPUT
            echo "test-types=[\"api\"]" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Get versions
        id: versions
        run: |
          echo "node=$(node -v)" >> $GITHUB_OUTPUT
          # Install dependencies to get Playwright version
          npm ci
          PLAYWRIGHT_VERSION=$(node -e "console.log(require('./node_modules/@playwright/test/package.json').version)")
          echo "playwright=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "node-modules=node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: node_modules
          key: ${{ steps.cache-keys.outputs.node-modules }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.versions.outputs.playwright }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing Playwright browsers..."
          npx playwright install --with-deps firefox chromium webkit
          echo "Playwright installation completed"

      - name: Post start notification to Slack
        id: slack-start
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: webhook-trigger
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload-file-path: ./scripts/ci/slack-templates/start.json
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          ENVIRONMENTS: ${{ steps.config.outputs.environments }}
          TEST_TYPES: ${{ steps.config.outputs.test-types }}

  health-check:
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.prepare.outputs.environments) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ needs.prepare.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Create environment file
        run: |
          ./scripts/ci/create-env-file.sh ${{ matrix.environment }}

      - name: Run health check
        timeout-minutes: 3
        run: |
          echo "Running health check for ${{ matrix.environment }}..."
          npx dotenv -e .env.${{ matrix.environment }} -- npx playwright test tests/api/health-check.smoke.spec.ts --project=api --timeout=30000 --reporter=json:health-check-${{ matrix.environment }}.json

      - name: Upload health check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-check-${{ matrix.environment }}
          path: health-check-${{ matrix.environment }}.json

  test:
    needs: [prepare, health-check]
    if: always() && !contains(needs.health-check.result, 'failure')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.prepare.outputs.environments) }}
        test-type: ${{ fromJson(needs.prepare.outputs.test-types) }}
        exclude:
          # UI tests only run on sealion
          - environment: leopard
            test-type: ui
          - environment: jaguar
            test-type: ui
          - environment: puma
            test-type: ui
          - environment: bear
            test-type: ui
          - environment: tiger
            test-type: ui
          - environment: whale
            test-type: ui
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ needs.prepare.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Restore Playwright browsers cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ needs.prepare.outputs.playwright-version }}
          fail-on-cache-miss: true

      - name: Create environment file
        run: |
          ./scripts/ci/create-env-file.sh ${{ matrix.environment }}

      - name: Run tests
        id: run-tests
        run: |
          echo "Running ${{ matrix.test-type }} tests for ${{ matrix.environment }}..."
          
          # Create results directory
          mkdir -p allure-results test-results
          
          # Set test command based on type
          if [[ "${{ matrix.test-type }}" == "api" ]]; then
            TEST_CMD="npx dotenv -e .env.${{ matrix.environment }} -- npx playwright test --project=api --reporter=allure-playwright,json:test-results/results-${{ matrix.environment }}-${{ matrix.test-type }}.json"
          else
            TEST_CMD="npx dotenv -e .env.${{ matrix.environment }} -- npx playwright test --project=ui --reporter=allure-playwright,json:test-results/results-${{ matrix.environment }}-${{ matrix.test-type }}.json"
          fi
          
          # Run tests with retry logic
          set +e
          $TEST_CMD
          TEST_EXIT_CODE=$?
          set -e
          
          echo "exit-code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Always exit successfully to ensure artifacts are uploaded
          exit 0

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.environment }}-${{ matrix.test-type }}
          path: |
            allure-results/
            test-results/
            playwright-report/
            screenshots/
            videos/
          retention-days: 30

  aggregate-results:
    needs: [prepare, health-check, test]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      overall-status: ${{ steps.aggregate.outputs.overall-status }}
      summary: ${{ steps.aggregate.outputs.summary }}
      report-url: ${{ steps.upload-report.outputs.report-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ needs.prepare.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Aggregate test results
        id: aggregate
        run: |
          node scripts/ci/aggregate-results.js artifacts/ > summary.json
          
          # Extract key metrics for outputs
          OVERALL_STATUS=$(node -e "console.log(require('./summary.json').overallStatus)")
          echo "overall-status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "summary=$(cat summary.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Generate Allure report
        run: |
          # Combine all allure results
          mkdir -p combined-allure-results
          find artifacts/ -name "allure-results" -type d -exec cp -r {}/* combined-allure-results/ \;
          
          # Download previous history from S3
          ./scripts/ci/download-allure-history.sh combined-allure-results/
          
          # Generate report
          npx allure generate combined-allure-results --clean -o allure-report
          
          # Create executor info
          ./scripts/ci/create-allure-metadata.js

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload Allure report to S3
        id: upload-report
        run: |
          REPORT_PATH="runs/${{ github.run_id }}"
          aws s3 sync allure-report "s3://${{ env.AWS_S3_BUCKET }}/$REPORT_PATH" --delete
          
          REPORT_URL="${{ env.AWS_CLOUDFRONT_DISTRIBUTION }}/$REPORT_PATH/index.html"
          echo "report-url=$REPORT_URL" >> $GITHUB_OUTPUT
          echo "Report available at: $REPORT_URL"

      - name: Detect flaky tests
        run: |
          node scripts/ci/flaky-detector.js artifacts/ > reports/flaky-tests.json
          node scripts/ci/generate-flaky-report.js reports/flaky-tests.json > reports/flaky-tests.md

      - name: Upload final artifacts
        uses: actions/upload-artifact@v4
        with:
          name: final-reports
          path: |
            summary.json
            allure-report/
            reports/

  notify:
    needs: [prepare, health-check, test, aggregate-results]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ needs.prepare.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Download summary
        uses: actions/download-artifact@v4
        with:
          name: final-reports
          path: reports/

      - name: Post final notification to Slack
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: webhook-trigger
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload-file-path: ./scripts/ci/slack-templates/result.json
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          NEEDS_CONTEXT: ${{ toJson(needs) }}
          THREAD_TS: ${{ needs.prepare.outputs.thread-ts }}
          SUMMARY_FILE: ./reports/summary.json
          REPORT_URL: ${{ needs.aggregate-results.outputs.report-url }}

      - name: Update commit status
        if: github.event_name != 'schedule'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.E2E_PAT || github.token }}
          script: |
            const summary = JSON.parse(require('fs').readFileSync('./reports/summary.json', 'utf8'));
            
            const state = summary.overallStatus === 'success' ? 'success' : 'failure';
            const description = `${summary.passed} passed, ${summary.failed} failed, ${summary.flaky} flaky`;
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              description: description,
              context: 'e2e-tests',
              target_url: '${{ needs.aggregate-results.outputs.report-url }}'
            });

  # Cleanup job to remove old artifacts and reports
  cleanup:
    needs: [notify]
    if: always() && github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cleanup old reports
        run: |
          # Keep only last 30 days of reports
          CUTOFF_DATE=$(date -d '30 days ago' '+%Y-%m-%d')
          echo "Cleaning up reports older than $CUTOFF_DATE"
          
          # This would need a more sophisticated script to parse S3 timestamps
          # For now, just log what we would do
          echo "Would clean up old reports from s3://${{ env.AWS_S3_BUCKET }}/runs/"