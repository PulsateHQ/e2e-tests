name: Run E2E Tests

run-name: run-e2e-tests - ${{ github.event.client_payload.environment }}

on:
  repository_dispatch:
    types: [run-e2e-tests]

# Use GitHub's built-in concurrency control for environment-specific queuing
concurrency:
  group: e2e-tests-${{ github.event.client_payload.environment }}
  cancel-in-progress: false

env:
  ALLURE_RESULTS_DIR: allure-results
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_CLOUDFRONT_DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION }}
  REPORT_URL: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION }}/staging/index.html

permissions:
  contents: read
  checks: write
  id-token: write

jobs:
  queue-info:
    runs-on: ubuntu-latest
    outputs:
      queue-position: ${{ steps.queue-check.outputs.position }}
      environment: ${{ github.event.client_payload.environment }}
    steps:
      - name: Check Queue Position
        id: queue-check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get workflow runs for this environment
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'tests.yml',
              event: 'repository_dispatch',
              status: 'in_progress',
              per_page: 50
            });

            const environment = '${{ github.event.client_payload.environment }}';
            const currentRunId = ${{ github.run_id }};

            // Count same-environment runs (GitHub concurrency will handle the actual queuing)
            const sameEnvRuns = runs.workflow_runs.filter(run => {
              return run.id !== currentRunId && 
                     run.display_title && 
                     run.display_title.includes('run-e2e-tests') &&
                     run.display_title.includes(environment);
            });

            const position = sameEnvRuns.length + 1;

            console.log(`Environment: ${environment}`);
            console.log(`Concurrency Group: e2e-tests-${environment}`);
            console.log(`Estimated Queue Position: ${position}`);
            console.log(`Note: GitHub's concurrency control handles the actual queuing`);

            core.setOutput('position', position);

      - name: Queue Status Notification
        if: steps.queue-check.outputs.position > 1
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: webhook-trigger
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "⏳ E2E Tests Queued",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "⏳ *E2E Tests Queued for ${{ github.event.client_payload.environment }}*\n\n📋 **Status**: Waiting in queue\n📍 **Queue Position**: #${{ steps.queue-check.outputs.position }}\n🔒 **Concurrency Group**: `e2e-tests-${{ github.event.client_payload.environment }}`\n\n📦 **Commit**: <${{ github.event.client_payload.commit_url }}|${{ github.event.client_payload.commit_sha }}>\n💬 **Message**: ${{ github.event.client_payload.commit_message }}\n\n🔗 **Run**: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Queue Status>"
                  }
                }
              ]
            }

      - name: Log Queue Information
        run: |
          echo "🚀 E2E Tests triggered for environment: ${{ github.event.client_payload.environment }}"
          echo "📍 Estimated Queue Position: #${{ steps.queue-check.outputs.position }}"
          echo "🔒 Concurrency Group: e2e-tests-${{ github.event.client_payload.environment }}"
          echo "📦 Commit: ${{ github.event.client_payload.commit_sha }}"
          echo "💬 Message: ${{ github.event.client_payload.commit_message }}"
          echo "⏱️ Started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔄 Run ID: ${{ github.run_id }}"
          echo ""
          echo "ℹ️  GitHub's concurrency control will automatically handle queuing for this environment"

  wait-for-environment:
    needs: [queue-info]
    timeout-minutes: 50
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    steps:
      - name: Wait for environment to be ready
        run: |
          echo "Waiting 45 minutes for ${{ github.event.client_payload.environment }} environment to be built and ready..."
          echo "Start time: $(date)"
          sleep 2700  # 45 minutes = 2700 seconds
          echo "End time: $(date)"
          echo "Environment should now be ready for testing"

  health-check:
    needs: [wait-for-environment]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: |
            node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Create env file
        run: |
          touch .env
          echo BASE_URL=${{ vars.BASE_URL }} >> .env
          echo WEB_SDK_API_URL=${{ vars.WEB_SDK_API_URL }} >> .env
          echo API_E2E_APP_ID=${{ vars.API_E2E_APP_ID }} >> .env
          echo SDK_API_URL=${{ vars.SDK_API_URL }} >> .env
          echo API_E2E_ACCESS_TOKEN_ADMIN=${{ secrets.API_E2E_ACCESS_TOKEN_ADMIN }} >> .env
          echo SUPER_ADMIN_ACCESS_TOKEN=${{ secrets.SUPER_ADMIN_ACCESS_TOKEN }} >> .env
          echo ENVIRONMENT=${{ github.event.client_payload.environment }} >> .env
      - name: Run Health Check Smoke Test
        timeout-minutes: 3
        run: |
          npx dotenv -e .env -- npx playwright test tests/api/health-check.smoke.spec.ts --project=api --timeout=30000

  test-started-notification:
    needs: [queue-info, health-check]
    if: needs.health-check.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Test Started Notification
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: webhook-trigger
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "🧪 E2E Tests - Now Running",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🧪 *E2E Tests - Now Running*\n\n📋 **Status**: Tests are now executing\n🌍 **Environment**: `${{ github.event.client_payload.environment }}`\n✅ **Health Check**: Passed\n📍 **Queue Position**: Was #${{ needs.queue-info.outputs.queue-position }}\n⏱️ **Timeout**: 30 minutes\n\n📦 **Commit**: <${{ github.event.client_payload.commit_url }}|${{ github.event.client_payload.commit_sha }}>\n💬 **Message**: ${{ github.event.client_payload.commit_message }}\n\n🔗 **Run**: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Progress>"
                  }
                }
              ]
            }

  setup-dependencies:
    needs: [test-started-notification]
    if: needs.test-started-notification.result == 'success'
    timeout-minutes: 15
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    outputs:
      playwright-version: ${{ steps.playwright-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: |
            node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Get installed Playwright version
        id: playwright-version
        run: |
          # Get Playwright version using Node.js (more reliable than jq)
          PLAYWRIGHT_VERSION=$(node -e "
          try {
            const pkg = require('./node_modules/@playwright/test/package.json');
            console.log(pkg.version);
          } catch (e) {
            console.log('not-found');
          }
          ")
          if [ "$PLAYWRIGHT_VERSION" = "not-found" ]; then
            echo "Error: Could not determine Playwright version. Playwright may not be installed."
            exit 1
          fi
          echo "Detected Playwright version: $PLAYWRIGHT_VERSION"
          echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing Playwright browsers (Firefox with dependencies)..."
          npx playwright install --with-deps firefox
          echo "Playwright browser installation completed"

  test:
    needs: [setup-dependencies]
    if: needs.setup-dependencies.result == 'success'
    timeout-minutes: 30
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ needs.setup-dependencies.outputs.playwright-version }}
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: |
            node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies (if cache miss)
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Install Playwright Browsers (if cache miss)
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing Playwright browsers (Firefox with dependencies)..."
          npx playwright install --with-deps firefox
          echo "Playwright browser installation completed"
      - name: Verify Playwright Installation
        run: |
          echo "Verifying Playwright installation..."
          npx playwright --version
          if [ -d "$HOME/.cache/ms-playwright" ]; then
            echo "Playwright browsers directory exists"
            ls -la "$HOME/.cache/ms-playwright" || true
          else
            echo "Warning: Playwright browsers directory not found"
          fi
      - name: Create env file
        run: |
          touch .env
          echo BASE_URL=${{ vars.BASE_URL }} >> .env
          echo WEB_SDK_API_URL=${{ vars.WEB_SDK_API_URL }} >> .env
          echo API_E2E_APP_ID=${{ vars.API_E2E_APP_ID }} >> .env
          echo SDK_API_URL=${{ vars.SDK_API_URL }} >> .env
          echo API_E2E_ACCESS_TOKEN_ADMIN=${{ secrets.API_E2E_ACCESS_TOKEN_ADMIN }} >> .env
          echo SUPER_ADMIN_ACCESS_TOKEN=${{ secrets.SUPER_ADMIN_ACCESS_TOKEN }} >> .env
          echo ENVIRONMENT=${{ github.event.client_payload.environment }} >> .env
      - name: Run Playwright tests
        run: |
          # Create allure-results directory
          mkdir -p allure-results

          # Run the tests
          npx dotenv -e .env -- npx playwright test --project=api

      - name: Archive test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            playwright-report/
            test-results/
            allure-results/

  reports:
    needs: [test, setup-dependencies]
    if: always() && needs.test.result != 'skipped'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: |
            node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies (if cache miss)
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: downloaded-artifacts

      - name: Prepare directories and restore artifacts
        run: |
          # Create required directories
          mkdir -p allure-results allure-report playwright-report test-results

          # Move files to their correct locations with better error handling
          if [ -d "downloaded-artifacts/allure-results" ] && [ "$(ls -A downloaded-artifacts/allure-results)" ]; then
            cp -r downloaded-artifacts/allure-results/* allure-results/
            echo "Restored allure-results artifacts"
          else
            echo "No allure-results artifacts found"
          fi

          if [ -d "downloaded-artifacts/playwright-report" ] && [ "$(ls -A downloaded-artifacts/playwright-report)" ]; then
            cp -r downloaded-artifacts/playwright-report/* playwright-report/
            echo "Restored playwright-report artifacts"
          else
            echo "No playwright-report artifacts found"
          fi

          if [ -d "downloaded-artifacts/test-results" ] && [ "$(ls -A downloaded-artifacts/test-results)" ]; then
            cp -r downloaded-artifacts/test-results/* test-results/
            echo "Restored test-results artifacts"
          else
            echo "No test-results artifacts found"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download previous history
        run: |
          AWS_S3_BUCKET_CLEAN=$(echo "$AWS_S3_BUCKET" | xargs)
          echo "Attempting to download previous Allure history from S3..."
          if aws s3 cp "s3://$AWS_S3_BUCKET_CLEAN/staging/history" "allure-results/history" --recursive; then
            echo "Successfully downloaded previous Allure history"
          else
            echo "No previous history found or download failed - continuing without history"
          fi

      - name: Create Allure executor configuration
        run: |
          echo '{
            "name": "GitHub Actions",
            "type": "github",
            "buildOrder": ${{ github.run_number }},
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportUrl": "${{ env.AWS_CLOUDFRONT_DISTRIBUTION }}/staging/index.html",
            "reportName": "E2E Tests - ${{ github.event.client_payload.environment }}",
            "buildName": "Run #${{ github.run_number }} - ${{ github.event.client_payload.environment }} (Push)"
          }' > allure-results/executor.json

      - name: Create Allure environment properties
        run: |
          # Set browser directly since we know it's Firefox from the Playwright installation step
          BROWSER="Firefox"

          echo "Environment=${{ github.event.client_payload.environment }}
          Browser=$BROWSER
          Commit_URL=${{ github.event.client_payload.commit_url }}
          Commit_SHA=${{ github.event.client_payload.commit_sha }}
          Commit_Message=${{ github.event.client_payload.commit_message }}
          Node_Version=$(node -v)
          Playwright_Version=$(npx playwright --version)" > allure-results/environment.properties

      - name: Generate Allure report
        run: |
          echo "Generating Allure report..."
          npx allure generate allure-results --clean -o allure-report

          # Verify report was generated
          if [ -f "allure-report/index.html" ]; then
            echo "Allure report generated successfully"
            echo "Report size: $(du -sh allure-report | cut -f1)"
          else
            echo "Error: Allure report generation failed - index.html not found"
            exit 1
          fi

      - name: Upload report to S3 bucket
        run: |
          AWS_S3_BUCKET_CLEAN=$(echo "$AWS_S3_BUCKET" | xargs)
          echo "Uploading Allure report to S3 bucket: $AWS_S3_BUCKET_CLEAN"
          if aws s3 sync allure-report "s3://$AWS_S3_BUCKET_CLEAN/staging" --delete; then
            echo "Successfully uploaded Allure report to S3"
            echo "Report available at: ${{ env.AWS_CLOUDFRONT_DISTRIBUTION }}/staging/index.html"
          else
            echo "Failed to upload Allure report to S3"
            exit 1
          fi

  notify-and-update-commit-status:
    needs: [queue-info, wait-for-environment, health-check, test, reports]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Slack Notification - Health Check Results
        if: needs.health-check.result != 'success'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: webhook-trigger
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "🚨 E2E Tests - Health Check Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚨 *E2E Tests - Health Check Failed*\n\n📋 **Status**: ❌ Health validation failed\n🌍 **Environment**: `${{ github.event.client_payload.environment }}`\n🏥 **Issue**: API health check endpoint not responding correctly\n\n📦 **Commit**: <${{ github.event.client_payload.commit_url }}|${{ github.event.client_payload.commit_sha }}>\n💬 **Message**: ${{ github.event.client_payload.commit_message }}\n\n🔗 **Run**: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run Details>\n\n⚠️ **Action Required**: Please investigate the API service status for `${{ github.event.client_payload.environment }}`"
                  }
                }
              ]
            }

      - name: Slack Notification - E2E Test Results
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: webhook-trigger
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "📊 E2E Test Results",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "📊 *E2E Test Results - ${{ github.event.client_payload.environment }}*\n\n🌍 **Environment**: `${{ github.event.client_payload.environment }}`\n📍 **Queue Position**: Was #${{ needs.queue-info.outputs.queue-position }}\n\n**Step Results:**\n🏥 **Health Check**: ${{ needs.health-check.result == 'success' && '✅ Passed' || '❌ Failed' }}\n🧪 **E2E Tests**: ${{ needs.test.result == 'success' && '✅ Passed' || needs.test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}\n📋 **Reports**: ${{ needs.reports.result == 'success' && '✅ Generated' || '❌ Failed' }}\n\n📦 **Commit**: <${{ github.event.client_payload.commit_url }}|${{ github.event.client_payload.commit_sha }}>\n💬 **Message**: ${{ github.event.client_payload.commit_message }}\n\n🔗 **Run**: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>\n📈 **Allure Report**: <${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION }}/staging/index.html|View Test Report>"
                  }
                }
              ]
            }

      - name: Update Commit Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.E2E_PAT }}
          script: |
            try {
              // Determine overall status based on health check and test results
              const healthCheckPassed = '${{ needs.health-check.result }}' === 'success';
              const testsPassed = '${{ needs.test.result }}' === 'success';
              const testsSkipped = '${{ needs.test.result }}' === 'skipped';
              
              let state = 'success';
              let description = 'All checks passed';
              
              if (!healthCheckPassed) {
                state = 'failure';
                description = 'Health check failed';
              } else if (testsSkipped) {
                state = 'success';
                description = 'Health check passed, tests skipped';
              } else if (!testsPassed) {
                state = 'failure';
                description = 'E2E tests failed';
              }
              
              await github.rest.repos.createCommitStatus({
                owner: 'PulsateHQ',
                repo: 'smokesignals',
                sha: '${{ github.event.client_payload.commit_sha }}',
                state: state,
                description: description,
                context: 'e2e-tests/${{ github.event.client_payload.environment }}'
              });
            } catch (error) {
              core.setFailed(`Failed to update commit status: ${error.message}`);
            }
