name: Run E2E Tests

run-name: run-e2e-tests - ${{ github.event.client_payload.environment }}

on:
  repository_dispatch:
    types: [run-e2e-tests]

permissions:
  contents: read
  checks: write
  id-token: write

jobs:
  health-check:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    concurrency:
      group: e2e-tests-${{ github.event.client_payload.environment }}
      cancel-in-progress: false
    steps:
      - name: Log Trigger Information
        run: |
          echo "🚀 E2E Tests triggered for environment: ${{ github.event.client_payload.environment }}"
          echo "🌍 Environment: ${{ github.event.client_payload.environment }}"
          echo "📦 Commit: ${{ github.event.client_payload.commit_sha }}"
          echo "💬 Message: ${{ github.event.client_payload.commit_message }}"
          echo "⏱️ Started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔄 Run ID: ${{ github.run_id }}"

      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: |
            node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Create env file
        run: |
          touch .env
          echo BASE_URL=${{ vars.BASE_URL }} >> .env
          echo WEB_SDK_API_URL=${{ vars.WEB_SDK_API_URL }} >> .env
          echo API_E2E_APP_ID=${{ vars.API_E2E_APP_ID }} >> .env
          echo SDK_API_URL=${{ vars.SDK_API_URL }} >> .env
          echo API_E2E_ACCESS_TOKEN_ADMIN=${{ secrets.API_E2E_ACCESS_TOKEN_ADMIN }} >> .env
          echo SUPER_ADMIN_ACCESS_TOKEN=${{ secrets.SUPER_ADMIN_ACCESS_TOKEN }} >> .env
          echo ENVIRONMENT=${{ github.event.client_payload.environment }} >> .env
      - name: Run Health Check Smoke Test
        timeout-minutes: 3
        run: |
          npx dotenv -e .env -- npx playwright test tests/api/health-check.smoke.spec.ts --project=api --timeout=30000

  setup-dependencies:
    needs: [health-check]
    if: needs.health-check.result == 'success'
    timeout-minutes: 15
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    outputs:
      playwright-version: ${{ steps.playwright-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: |
            node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Get installed Playwright version
        id: playwright-version
        run: |
          # Get Playwright version using Node.js (more reliable than jq)
          PLAYWRIGHT_VERSION=$(node -e "
          try {
            const pkg = require('./node_modules/@playwright/test/package.json');
            console.log(pkg.version);
          } catch (e) {
            console.log('not-found');
          }
          ")
          if [ "$PLAYWRIGHT_VERSION" = "not-found" ]; then
            echo "Error: Could not determine Playwright version. Playwright may not be installed."
            exit 1
          fi
          echo "Detected Playwright version: $PLAYWRIGHT_VERSION"
          echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing Playwright browsers (Firefox with dependencies)..."
          npx playwright install --with-deps firefox
          echo "Playwright browser installation completed"

  test:
    needs: [setup-dependencies]
    if: needs.setup-dependencies.result == 'success'
    timeout-minutes: 30
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ needs.setup-dependencies.outputs.playwright-version }}
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: |
            node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies (if cache miss)
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Install Playwright Browsers (if cache miss)
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing Playwright browsers (Firefox with dependencies)..."
          npx playwright install --with-deps firefox
          echo "Playwright browser installation completed"
      - name: Verify Playwright Installation
        run: |
          echo "Verifying Playwright installation..."
          npx playwright --version
          if [ -d "$HOME/.cache/ms-playwright" ]; then
            echo "Playwright browsers directory exists"
            ls -la "$HOME/.cache/ms-playwright" || true
          else
            echo "Warning: Playwright browsers directory not found"
          fi
      - name: Create env file
        run: |
          touch .env
          echo BASE_URL=${{ vars.BASE_URL }} >> .env
          echo WEB_SDK_API_URL=${{ vars.WEB_SDK_API_URL }} >> .env
          echo API_E2E_APP_ID=${{ vars.API_E2E_APP_ID }} >> .env
          echo SDK_API_URL=${{ vars.SDK_API_URL }} >> .env
          echo API_E2E_ACCESS_TOKEN_ADMIN=${{ secrets.API_E2E_ACCESS_TOKEN_ADMIN }} >> .env
          echo SUPER_ADMIN_ACCESS_TOKEN=${{ secrets.SUPER_ADMIN_ACCESS_TOKEN }} >> .env
          echo ENVIRONMENT=${{ github.event.client_payload.environment }} >> .env
      - name: Run Playwright tests
        run: |
          npx dotenv -e .env -- npx playwright test --project=api

      - name: Archive test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            playwright-report/
            test-results/

  notify-and-update-commit-status:
    needs: [health-check, test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Slack Notification - Health Check Failed
        if: needs.health-check.result != 'success'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: webhook-trigger
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "🚨 E2E Tests - Health Check Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚨 *E2E Tests - Health Check Failed*\n\n📋 *Status*: ❌ Health validation failed\n🌍 *Environment*: `${{ github.event.client_payload.environment }}`\n🏥 *Issue*: API health check endpoint not responding correctly\n\n📦 *Commit*: <${{ github.event.client_payload.commit_url }}|${{ github.event.client_payload.commit_sha }}>\n💬 *Message*: ${{ github.event.client_payload.commit_message }}\n\n🔗 *Run*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run Details>\n\n⚠️ *Action Required*: Please investigate the API service status for `${{ github.event.client_payload.environment }}`"
                  }
                }
              ]
            }

      - name: Slack Notification - E2E Tests Failed
        if: needs.health-check.result == 'success' && needs.test.result != 'success'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: webhook-trigger
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "❌ E2E Tests Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *E2E Tests Failed - ${{ github.event.client_payload.environment }}*\n\n🌍 *Environment*: `${{ github.event.client_payload.environment }}`\n\n*Step Results:*\n🏥 *Health Check*: ✅ Passed\n🧪 *E2E Tests*: ${{ needs.test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}\n\n📦 *Commit*: <${{ github.event.client_payload.commit_url }}|${{ github.event.client_payload.commit_sha }}>\n💬 *Message*: ${{ github.event.client_payload.commit_message }}\n\n🔗 *Run*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }

      - name: Update Commit Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.E2E_PAT }}
          script: |
            try {
              // Determine overall status based on health check and test results
              const healthCheckPassed = '${{ needs.health-check.result }}' === 'success';
              const testsPassed = '${{ needs.test.result }}' === 'success';
              const testsSkipped = '${{ needs.test.result }}' === 'skipped';
              
              let state = 'success';
              let description = 'All checks passed';
              
              if (!healthCheckPassed) {
                state = 'failure';
                description = 'Health check failed';
              } else if (testsSkipped) {
                state = 'success';
                description = 'Health check passed, tests skipped';
              } else if (!testsPassed) {
                state = 'failure';
                description = 'E2E tests failed';
              }
              
              await github.rest.repos.createCommitStatus({
                owner: 'PulsateHQ',
                repo: 'smokesignals',
                sha: '${{ github.event.client_payload.commit_sha }}',
                state: state,
                description: description,
                context: 'e2e-tests/${{ github.event.client_payload.environment }}'
              });
            } catch (error) {
              core.setFailed(`Failed to update commit status: ${error.message}`);
            }
