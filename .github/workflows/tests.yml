name: Run E2E Tests

on:
  repository_dispatch:
    types: [run-e2e-tests]

env:
  ALLURE_RESULTS_DIR: allure-results
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_CLOUDFRONT_DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION }}

permissions:
  contents: read
  checks: write
  id-token: write

jobs:
  prepare-env:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
      - name: Get installed Playwright version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(node -e "
          const pkgLock = require('./package-lock.json');
          const version = pkgLock.packages['node_modules/@playwright/test']?.version || 'not-found';
          ")
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: |
            node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps firefox

  test:
    needs: [prepare-env]
    timeout-minutes: 10
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    outputs:
      test_outcome: ${{ steps.set-outcome.outputs.test_outcome }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: |
            node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}
      - name: Create env file
        run: |
          touch .env
          echo BASE_URL=${{ vars.BASE_URL }} >> .env
          echo API_E2E_APP_ID=${{ vars.API_E2E_APP_ID }} >> .env
          echo SDK_API_URL=${{ vars.SDK_API_URL }} >> .env
          echo API_E2E_ACCESS_TOKEN_ADMIN=${{ secrets.API_E2E_ACCESS_TOKEN_ADMIN }} >> .env
          echo SUPER_ADMIN_ACCESS_TOKEN=${{ secrets.SUPER_ADMIN_ACCESS_TOKEN }} >> .env
          echo API_E2E_ACCESS_TOKEN_SDK=${{ secrets.API_E2E_ACCESS_TOKEN_SDK }} >> .env
          echo ENVIRONMENT=${{ github.event.client_payload.environment }} >> .env
      - name: Run Playwright tests
        id: run-tests
        run: npx dotenv -e .env -- npx playwright test --project=api
      - name: Set Test Outcome
        id: set-outcome
        run: echo "test_outcome=${{ steps.run-tests.outcome }}" >> "$GITHUB_OUTPUT"
      - name: Archive test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            playwright-report/**/*.*
            test-results/**/*.*
            allure-results/**/*.*

  reports:
    needs: [test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: .
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Generate Allure Report
        if: always()
        run: |
          npm install -g allure-commandline
          allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o allure-report
      - name: Upload report to S3
        if: always()
        run: |
          # Create unique folder name using environment and run ID
          REPORT_DIR="${{ github.event.client_payload.environment }}/run-${{ github.run_id }}"

          # Upload to S3
          aws s3 sync allure-report s3://${{ env.AWS_S3_BUCKET }}/$REPORT_DIR

          # Get CloudFront URL
          REPORT_URL="https://${{ env.AWS_CLOUDFRONT_DISTRIBUTION }}/$REPORT_DIR"
          echo "REPORT_URL=$REPORT_URL" >> $GITHUB_ENV
      - name: Publish test report
        if: success() || failure()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: './playwright-report/results.xml'

  notify-and-update-pr-status:
    needs: [test, reports]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Slack Notification - E2E Test Results
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: webhook-trigger
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "E2E Test Results üß™",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*E2E Test Results for ${{ github.event.client_payload.environment }}*\n‚Ä¢ Repository: *Smokesignals*\n‚Ä¢ PR: ${{ github.event.client_payload.pr_title }}\n‚Ä¢ Status: ${{ needs.test.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}\n‚Ä¢ Run: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run Details>\n‚Ä¢ Report: <${{ env.REPORT_URL }}|View Allure Report>"
                  }
                }
              ]
            }

      - name: Update PR Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.E2E_PAT }}
          script: |
            try {
              await github.rest.repos.createCommitStatus({
                owner: 'PulsateHQ',
                repo: 'smokesignals',
                sha: '${{ github.event.client_payload.commit_sha }}',
                state: '${{ needs.test.outputs.test_outcome }}' === 'success' ? 'success' : 'failure',
                description: 'E2E tests completed with status: ${{ needs.test.outputs.test_outcome }}',
                context: 'e2e-tests/${{ github.event.client_payload.environment }}'
              });
            } catch (error) {
              core.setFailed(`Failed to update PR status: ${error.message}`);
            }
